"""create patient_profile and doctor_profile tables

Revision ID: 58f933a12b33
Revises: b78c46cd2c7a
Create Date: 2025-04-13 13:52:29.080770

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# Import func if needed for server_default, or use sa.text
# from sqlalchemy.sql import func


# revision identifiers, used by Alembic.
revision: str = '58f933a12b33'
down_revision: Union[str, None] = 'b78c46cd2c7a' # Check if this is your previous revision ID
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - START ###
    # Keep table creations as they are - these are fine
    op.create_table('doctor_profiles',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(), nullable=True),
        sa.Column('specialty', sa.String(), nullable=True),
        sa.Column('hospital_affiliation', sa.String(), nullable=True),
        sa.Column('years_experience', sa.Integer(), nullable=True),
        sa.Column('qualifications', sa.Text(), nullable=True),
        sa.Column('about_me', sa.Text(), nullable=True),
        sa.Column('is_complete', sa.Boolean(), nullable=False, server_default='0'), # Add server_default
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_id')
    )
    op.create_index(op.f('ix_doctor_profiles_specialty'), 'doctor_profiles', ['specialty'], unique=False)

    op.create_table('patient_profiles',
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(), nullable=True),
        sa.Column('age', sa.Integer(), nullable=True),
        sa.Column('gender', sa.String(), nullable=True),
        sa.Column('height_cm', sa.Integer(), nullable=True),
        sa.Column('weight_kg', sa.Float(), nullable=True),
        sa.Column('blood_type', sa.String(), nullable=True),
        sa.Column('is_complete', sa.Boolean(), nullable=False, server_default='0'), # Add server_default
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_id')
    )

    # --- Batch alter for appointments table ---
    with op.batch_alter_table('appointments', schema=None) as batch_op:
        batch_op.alter_column('created_at',
                existing_type=sa.DATETIME(),
                nullable=False,
                # Explicitly set server default for SQLite during batch alter
                server_default=sa.text('(CURRENT_TIMESTAMP)') # Use text for SQLite
        )
        batch_op.alter_column('updated_at',
                existing_type=sa.DATETIME(),
                nullable=False,
                 # Explicitly set server default for SQLite during batch alter
                server_default=sa.text('(CURRENT_TIMESTAMP)') # Use text for SQLite
        )
        # Add onupdate behavior if needed via trigger (more complex) or rely on application logic for updated_at
        # SQLite doesn't natively support ON UPDATE CURRENT_TIMESTAMP easily in batch alter

    # Note: Also check if notifications.created_at needs similar treatment if nullable=False was added there
    # Example (Add if needed):
    # with op.batch_alter_table('notifications', schema=None) as batch_op:
    #     batch_op.alter_column('created_at',
    #            existing_type=sa.DATETIME(),
    #            nullable=False,
    #            server_default=sa.text('(CURRENT_TIMESTAMP)'))

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - START ###

    # --- Batch alter for appointments table ---
    with op.batch_alter_table('appointments', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
                existing_type=sa.DATETIME(),
                nullable=True, # Revert to nullable
                server_default=None) # Remove server default
        batch_op.alter_column('created_at',
                existing_type=sa.DATETIME(),
                nullable=True, # Revert to nullable
                server_default=None) # Remove server default

    # --- Batch alter for notifications table (IF MODIFIED in upgrade) ---
    # Example (Add if needed):
    # with op.batch_alter_table('notifications', schema=None) as batch_op:
    #     batch_op.alter_column('created_at',
    #            existing_type=sa.DATETIME(),
    #            nullable=True,
    #            server_default=None)


    # Keep table drops as they are
    op.drop_table('patient_profiles')
    op.drop_index(op.f('ix_doctor_profiles_specialty'), table_name='doctor_profiles')
    op.drop_table('doctor_profiles')
    # ### end Alembic commands ###